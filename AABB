public class AABB
    {
        
        public AABB(Vector3 Min, Vector3 Max)
        {
            MinExtent = Min;
            MaxExtent = Max;
        }
        Vector3 MinExtent;
        Vector3 MaxExtent;
    }

    public float Top
    {
        get { return MaxExtent.y;}
    }

    public float Bottom
    {
        get { return MinExtent.y; }
    }


    public float Left
    {
        get { return MinExtent.x; }
    }

    public float Right
    {
        get { return MaxExtent.x; }
    }

    public float Front
    {
        get { return MaxExtent.z; }
    }

    public float Top
    {
        get { return MinExtent.z; }
    }

    public static bool Intersects(AABB Box1, AABB Box2)
    {
        return !(Box2.Left > Box1.Right
            || Box2.Right < Box1.Left
            || Box2.Top < Box1.Left
            || Box2.Bottom > Box1.Top
            || Box2.Back > Box1.Front
            || Box2.Front < Box1.Back);
    }

    public static bool LineIntersection(AABB Box, Vector3 StartPoint, Vector3 EndPoint, out Vector3 IntersectionPoint)
    {
        //Define our initial lowest and highest
        float Lowest = 0.0f;
        float Highest = 1.0f;

        //Default value for intersction point is needed 
        IntersectionPointPoint = Vector3.zero;

        if (!IntersectingAxis(Vector3.Right, Box, StartPoint, EndPoint, ref Lowest, ref Highest))
            return false;

        if (!IntersectingAxis(Vector3.Up, Box, StartPoint, EndPoint, ref Lowest, ref Highest))
            return false;

        if (!IntersectingAxis(Vector3.Front, Box, StartPoint, EndPoint, ref Lowest, ref Highest))
            return false;

        IntersectionPoint = MyVector2.VecLerp(StartPoint, EndPoint, Lowest);

        return true;
    }

    public static bool InersectingAxis(Vector3 Axis, AABB Box, Vector3 StartPoint, Vector3 EndPoint, ref float Lowest, ref float Highest)
    {
        //calculate Minimum and Maximum based on the current Axis
        float Minimum = 0.0f, Maximum = 1.0f;
        if (Axis == Vector3.right)
        {
            Minimum = (Box.Left - StartPoint.x) / (EndPoint.x - StartPoint.x);
            Maximum = (Box.Right - StartPoint.x) / (EndPoint.x - StartPoint.x);
        }

        else if (Axis == Vector3.right)
        {
            Minimum = (Box.Bottom - StartPoint.y) / (EndPoint.y - StartPoint.y);
            Maximum = (Box.Top - StartPoint.y) / (EndPoint.y - StartPoint.y);
        }

        else if (Axis == Vector3.right)
        {
            Minimum = (Box.Back - StartPoint.z) / (EndPoint.z - StartPoint.z);
            Maximum = (Box.Front - StartPoint.z) / (EndPoint.z - StartPoint.z);
        }

        if (Maximum < Minimum)
        {
            //swapping values
            float temp = Maximum;
            Maximum = Minimum;
            Minimum = temp;
        }

        //eliminate non-intersections early
        if (Maximum < Lowest)
            return false;

        if (Minimum > Highest)
            return false;

        Lowest = Mathf.Max(Minimum, Lowest);
        Highest = Mathf.Min(Maximum, Highest);

        if (Lowest > Highest)
            return false;

        return true;
    }

    public Matrix4by4 TranslationInverse()
    {
        Matrix4by4 rv = Identity;

        rv.values[0, 3] = -values[0, 3];
        rv.values[1, 3] = -values[1, 3];
        rv.values[2, 3] = -values[2, 3];

        return rv;
    }
